name: Manual (uv) Dependency Check
on:
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version'
        required: true
        default: '3.12.4'
        type: choice
        options:
        - '3.7'
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
        - '3.12.4'
jobs:
  dependency-check:
    runs-on: ubuntu-latest
    # Add permission to allow writing to the repository
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "0.4.27"
    - name: Set up Python
      run: uv python install ${{ github.event.inputs.python-version }}
    
    - name: Create timestamp and directory for reports
      id: setup_dirs
      run: |
        # Create a timestamp for the folder name
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        RUN_ID="${TIMESTAMP}_run_${{ github.run_id }}"
        echo "report_dir=dependency_reports/$RUN_ID" >> $GITHUB_OUTPUT
        
        # Create the dependencies directory
        mkdir -p dependency_reports/$RUN_ID
        
        # Save initial metadata
        echo "Python version: ${{ github.event.inputs.python-version }}" > dependency_reports/$RUN_ID/metadata.txt
        echo "Run timestamp: $(date)" >> dependency_reports/$RUN_ID/metadata.txt
        echo "Workflow run ID: ${{ github.run_id }}" >> dependency_reports/$RUN_ID/metadata.txt
    
    - name: Install and check dependencies
      id: install_deps
      run: |
        uv init example -p ${{ github.event.inputs.python-version }}
        cp requirements.txt example/requirements.txt
        cd example
        uv venv
        uv pip install setuptools
        
        # Flag to track errors within this shell context
        ERROR_OCCURRED=false
        
        # Process requirements individually to identify problematic dependencies
        mkdir -p "../${{ steps.setup_dirs.outputs.report_dir }}/individual_results"
        echo "# Dependency Installation Results" > "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
        echo "Python version: ${{ github.event.inputs.python-version }}" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
        echo "Run timestamp: $(date)" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
        echo "" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
        echo "## Individual Package Results" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
        
        # First try the regular install to capture bulk dependencies
        uv pip install -r requirements.txt > "../${{ steps.setup_dirs.outputs.report_dir }}/install_output.txt" 2>&1 || {
          echo "pip install failed with status $?" >> "../${{ steps.setup_dirs.outputs.report_dir }}/error_log.txt"
          ERROR_OCCURRED=true
          echo "ERROR_OCCURRED=true" >> $GITHUB_OUTPUT
          
          # Identify problematic packages by installing each one individually
          echo "### Failed Packages" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
          while IFS= read -r req || [[ -n "$req" ]]; do
            # Skip comments and empty lines
            [[ "$req" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$req" ]] && continue
            
            echo "Testing package: $req"
            # Create a clean temporary virtual environment for each package
            rm -rf temp_venv || true
            uv venv --path temp_venv
            
            # Try to install the single package
            if temp_venv/bin/uv pip install "$req" > "../${{ steps.setup_dirs.outputs.report_dir }}/individual_results/${req// /_}.txt" 2>&1; then
              echo "✅ $req" >> "../${{ steps.setup_dirs.outputs.report_dir }}/dependency_issues.md"
            else
              echo "❌
    
    - name: Commit dependency report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add dependency_reports/
        
        if [ -f "${{ steps.setup_dirs.outputs.report_dir }}/error_log.txt" ]; then
          git commit -m "Add dependency report for Python ${{ github.event.inputs.python-version }} (Run ID: ${{ github.run_id }}) - FAILED" || echo "No changes to commit"
        else
          git commit -m "Add dependency report for Python ${{ github.event.inputs.python-version }} (Run ID: ${{ github.run_id }}) - SUCCESS" || echo "No changes to commit"
        fi
        
        git push
